# Generated by Django 3.2 on 2024-07-01 20:30

import cloudinary.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('instructions', models.TextField(blank=True, default='')),
                ('background', models.CharField(blank=True, default='', max_length=25, verbose_name='Background color - accepts javascript keywords or #RRGGBB.')),
                ('mute_feedback', models.BooleanField(default=False, verbose_name='Mute all feedback messages for this condition.')),
                ('min_cycles', models.PositiveSmallIntegerField(default=0, verbose_name='Minimum number of cycles before checking any end rules')),
            ],
            options={
                'verbose_name': 'Condition',
                'verbose_name_plural': 'Conditions',
            },
        ),
        migrations.CreateModel(
            name='BlockEndRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_cycles', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name="Minimum number of cycles before checking, if different from condition's minimum cycles")),
                ('max_cycles', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='Maximum number of cycles before next condition (Only use for default)')),
                ('end_game_after_block', models.BooleanField(default=False, verbose_name='End the game after this condition if this rule is met?')),
                ('point_min_value', models.SmallIntegerField(blank=True, null=True, verbose_name='Trigger the next condition if points below: ')),
                ('point_max_value', models.SmallIntegerField(blank=True, null=True, verbose_name='Trigger the next condition if points above: ')),
                ('stable_lookback_pattern', models.BooleanField(default=False, verbose_name='Trigger if the same choices have been made for 80\\% of previous 20 cycles')),
                ('stable_lookback_points', models.BooleanField(default=False, verbose_name='Trigger if the same player has had the most points for 80\\% of previous 20 cycles')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attached_block', to='kyoapp.block')),
                ('next_block', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='next_block', to='kyoapp.block', verbose_name='Next Condition - Leave blank to repeat this block or end the game')),
            ],
            options={
                'verbose_name': 'Block End Rule',
                'verbose_name_plural': 'Block End Rules',
            },
        ),
        migrations.CreateModel(
            name='BlockInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('elapsed_cycles', models.PositiveSmallIntegerField(default=0, editable=False)),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.block')),
            ],
            options={
                'verbose_name': 'Condition Instance',
                'verbose_name_plural': 'Condition Instances',
            },
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', cloudinary.models.CloudinaryField(max_length=255, verbose_name='image')),
            ],
        ),
        migrations.CreateModel(
            name='ComboRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_points', models.SmallIntegerField(verbose_name='Number of points to add. Can be negative to subtract points.')),
                ('target', models.CharField(blank=True, default='', editable=False, max_length=5, verbose_name="Which player's points should be affected? Numbers indicate a seat, '+1' or '-1' indicate the player 1 seat to the right or left. Leave blank for group points or to indicate the player themselves.")),
                ('schedule', models.CharField(choices=[('FR', 'FR'), ('VR', 'VR'), ('FI', 'FI'), ('VI', 'VI')], default='FR', max_length=2)),
                ('schedule_number', models.PositiveSmallIntegerField(default=1, verbose_name='Schedule Number (indicates times for Ratio schedule, indicates seconds for Interval schedule')),
                ('name', models.CharField(blank=True, max_length=200)),
                ('ratio_delay_number', models.PositiveSmallIntegerField(editable=False, null=True)),
                ('interval_next_trigger_time', models.DateTimeField(editable=False, null=True)),
                ('mute_feedback', models.BooleanField(default=False, verbose_name='Mute feedback messages from this rule')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.block')),
            ],
        ),
        migrations.CreateModel(
            name='Cycle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('finish_time', models.DateTimeField(null=True)),
                ('complete', models.BooleanField(default=False)),
                ('processed', models.BooleanField(default=False)),
                ('results', models.TextField(default='')),
                ('final_points', models.TextField(default='')),
                ('block_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.blockinstance')),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.CharField(max_length=6, unique=True, verbose_name='Code participants will use to join (5 characters max)')),
                ('player_count', models.PositiveSmallIntegerField()),
                ('previous_cycle_displayed', models.BooleanField(blank=True, default=False, verbose_name='Display the previous cycle choices')),
                ('current_cycle_displayed', models.BooleanField(blank=True, default=False, verbose_name='Display the current cycle choices of other players')),
                ('enforce_choice_order', models.BooleanField(blank=True, default=False, verbose_name='Participants choose sequentially (if unselected, everyone can register choices simultaneously)')),
                ('chat', models.BooleanField(blank=True, default=True, verbose_name='Chat client enabled')),
                ('show_others_points', models.BooleanField(blank=True, default=False, verbose_name="Show all player's points to everyone (uncheck to see only your points and group points)")),
                ('started', models.DateTimeField(editable=False, null=True)),
                ('finished', models.DateTimeField(editable=False, null=True)),
                ('manually_stopped', models.BooleanField(default=False, editable=False)),
                ('instructions', models.TextField(default='You and others will play a game to earn points in this experiment. During the game, you will be asked to make choices that will give a certain amount of points to either other players or to yourself. You can play however you want to play this game. You will receive additional instructions throughout the game from the experimenter. The game will take approximately two hours to complete. We will let you know when the experiment is over. At the end of the experiment, your points will be exchanged for money (1 pt = 1 cent).')),
                ('background', models.CharField(blank=True, default='white', max_length=25, verbose_name='Background color - accepts javascript keywords or #RRGGBB. This is overridden by a specific color for a block.')),
                ('mute_feedback', models.BooleanField(default=False, verbose_name='Mute all feedback messages for this game')),
                ('choices', models.ManyToManyField(to='kyoapp.Choice')),
                ('current_block_instance', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_block_instance', to='kyoapp.blockinstance')),
            ],
        ),
        migrations.CreateModel(
            name='Point',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name="Name (Please don't name anything just 'points', it will break things.)")),
                ('display_name', models.CharField(blank=True, max_length=100, verbose_name='Display Name (Leave blank if same as name)')),
                ('individual', models.BooleanField(blank=True, default=False, verbose_name='Individual Points (if not defaults to group/shared)')),
                ('hidden', models.BooleanField(blank=True, default=False, verbose_name="Hidden (allows points/counters for logic the players can't see)")),
                ('starting_value', models.SmallIntegerField(blank=True, default=0, verbose_name='Starting Value (0 if not specified)')),
            ],
        ),
        migrations.CreateModel(
            name='SingleRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200)),
                ('player_number', models.PositiveSmallIntegerField(default=0, verbose_name='Player Number this rule applies to. If 0, applies to all players.')),
                ('num_points', models.SmallIntegerField(verbose_name='Number of points to add. Can be negative to subtract points.')),
                ('target', models.CharField(blank=True, max_length=5, verbose_name="Which player's points should be affected? Numbers indicate a seat, '+1' or '-1' indicate the player 1 seat to the right or left. Leave blank for group points or to indicate the player themselves.")),
                ('schedule', models.CharField(choices=[('FR', 'FR'), ('VR', 'VR'), ('FI', 'FI'), ('VI', 'VI')], default='FR', max_length=2)),
                ('schedule_number', models.PositiveSmallIntegerField(default=1, verbose_name='Schedule Number (indicates times for Ratio schedule, indicates seconds for Interval schedule')),
                ('mute_feedback', models.BooleanField(default=False, verbose_name='Mute feedback messages from this rule')),
                ('mutable_rule', models.BooleanField(default=False, verbose_name='Rule starts identical for all players but will diverge (e.g. worth 5 more points for the player with the most points after one condition)')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.block')),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.choice')),
                ('point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.point')),
            ],
        ),
        migrations.CreateModel(
            name='SingleRuleModification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('new_player_number', models.CharField(blank=True, max_length=50, null=True, verbose_name="New Player Number - leave blank if not changing/applies to everyone. If you specify a player for a rule that applies to everyone, it will only change for that player. 'max:point_name','min:point_name' are supported.")),
                ('new_num_points', models.CharField(blank=True, max_length=10, verbose_name="New Num Points - leave blank if not changed, supports '+:5' or '-:5' to adjust previous value up or down")),
                ('new_target', models.CharField(blank=True, max_length=5)),
                ('new_schedule_number', models.CharField(max_length=10, verbose_name="New schedule number - leave blank if not changed, supports '+:5' or '-:5'")),
                ('block_end_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.blockendrule', verbose_name='Condition End Rule where we apply this modification')),
                ('parent_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.singlerule')),
            ],
        ),
        migrations.CreateModel(
            name='SeatedPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat', models.PositiveSmallIntegerField()),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.game')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RuleInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_number', models.PositiveSmallIntegerField(default=0)),
                ('num_points', models.SmallIntegerField()),
                ('target', models.CharField(max_length=5)),
                ('schedule_number', models.PositiveSmallIntegerField(default=1)),
                ('ratio_delay_number', models.PositiveSmallIntegerField(null=True)),
                ('interval_next_trigger_time', models.DateTimeField(null=True)),
                ('block_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.blockinstance')),
                ('combo_rule', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='kyoapp.comborule')),
                ('single_rule', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='kyoapp.singlerule')),
            ],
        ),
        migrations.CreateModel(
            name='PointInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.SmallIntegerField(default=0)),
                ('seat_number', models.PositiveSmallIntegerField(null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.game')),
                ('point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.point')),
            ],
        ),
        migrations.CreateModel(
            name='Move',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('seat_number', models.PositiveSmallIntegerField()),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.choice')),
                ('cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.cycle')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='IntermediaryRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.choice')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.comborule')),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='players',
            field=models.ManyToManyField(editable=False, through='kyoapp.SeatedPlayer', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='game',
            name='points',
            field=models.ManyToManyField(blank=True, to='kyoapp.Point'),
        ),
        migrations.AddField(
            model_name='game',
            name='starting_block',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.block', verbose_name='Starting Condition'),
        ),
        migrations.CreateModel(
            name='ErrorCapture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('message', models.TextField()),
                ('source', models.TextField()),
                ('lineno', models.TextField()),
                ('colno', models.TextField()),
                ('error', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ComboRuleModification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('new_num_points', models.CharField(blank=True, max_length=10, verbose_name="New Num Points - leave blank if not changed, supports '+:5' or '-:5'")),
                ('new_target', models.CharField(blank=True, max_length=5)),
                ('new_schedule_number', models.CharField(max_length=10, verbose_name="New schedule number - leave blank if not changed, supports '+:5' or '-:5'")),
                ('block_end_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.blockendrule')),
                ('parent_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.comborule')),
            ],
        ),
        migrations.AddField(
            model_name='comborule',
            name='choices',
            field=models.ManyToManyField(through='kyoapp.IntermediaryRule', to='kyoapp.Choice'),
        ),
        migrations.AddField(
            model_name='comborule',
            name='point',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.point'),
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('message', models.TextField()),
                ('slug', models.CharField(max_length=6)),
                ('target', models.CharField(default='all', max_length=10)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BlockPlayerInstructions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat_number', models.PositiveSmallIntegerField()),
                ('instructions', models.TextField(blank=True, default='')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.block')),
            ],
            options={
                'verbose_name': 'Player Specific Instructions',
                'verbose_name_plural': 'Player Specific Instructions',
            },
        ),
        migrations.AddField(
            model_name='blockinstance',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kyoapp.game'),
        ),
        migrations.AddField(
            model_name='blockendrule',
            name='point',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='kyoapp.point'),
        ),
    ]
